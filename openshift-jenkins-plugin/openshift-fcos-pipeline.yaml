# vim: syntax=groovy
kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "openshift-fcos-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      type: JenkinsPipeline
      jenkinsfile: |-
        // path of the template to use
          def podPath = 'https://raw.githubusercontent.com/dustymabe/fedora-coreos-ci/master/openshift-jenkins-plugin/pod.yaml'
          def podName = 'coreos-assembler'
        //def podName = 'coreos-assembler-sleep'
        // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
        // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
        // will not be fully engaged.
        pipeline {
            agent none
            options {
                // set a timeout of 20 minutes for this pipeline
                timeout(time: 30, unit: 'MINUTES')
            }

            stages {
                stage('preamble') {
                    steps {
                        script {
                            echo "Stage: preamble"
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        }
                    }
                }
              //stage('cleanup') {
              //    steps {
              //        script {
              //            openshift.withCluster() {
              //                openshift.withProject() {
              //                    // delete everything with this template label
              //                    openshift.selector("all", [ template : templateName ]).delete()
              //                    // delete any secrets with this template label
              //                    if (openshift.selector("secrets", templateName).exists()) {
              //                        openshift.selector("secrets", templateName).delete()
              //                    }
              //                }
              //            }
              //        } // script
              //    } // steps
              //} // stage
                stage('create') {
                    // create pod here
                    steps {
                        script {
                            echo "Stage: create"
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // create a new application from the templatePath
                                    //openshift.newApp(templatePath)
                                    openshift.create(podPath)
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('build') {
                    // wait for pod to finish
                    steps {
                        script {
                            echo "Stage: build"
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // grab pod
                                    def pod = openshift.selector("pod/${podName}")
                                    // wait for pod to start running
                                    pod.untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                  //try {
                                  //    
                                  //}
                                  //catch(all) {
                                  //    currentBuild.result = 'FAILURE'
                                  //    currentBuild.result = 'SUCCESS'
                                  //    return
                                  //}
                                    //echo "So far, ${pod}"
                                    //echo "So far, ${pod.status}"
                                    //def foo = pod.object()
                                    //echo "So far, ${foo}"
                                    //echo "So far, ${foo.status}"
                                    result = pod.logs('-f')
                                  //echo "result is ${result}"
                                  //echo "actions0 is ${result.actions[0]}"
                                  //def foo = pod.object()
                                  //echo "So far, ${foo}"
                                  //echo "So far, ${foo.status}"
                                    pod.untilEach(1) {
                                        return (it.object().status.phase == "Succeeded")
                                    }
                                  //pod.exec('ls -l')
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('archive') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    result = openshift.exec("${podName}", "--", "bash", "-c",
                                                                "'RSYNC_PASSWORD=\$(cat /var/run/secrets/kubernetes.io/duffy-key/duffy.key); RSYNC_PASSWORD=\${RSYNC_PASSWORD:0:13} rsync -avh --dry-run --delete ./builds/ ./repo/ fedora-coreos@artifacts.ci.centos.org::fedora-coreos/delete/'")
                                    //echo "result is ${result}"
                                    echo "${result.actions[0].out}"
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('cleanup') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // delete everything with this template label
                                    openshift.selector("pod/${podName}").delete()
                                }
                            }
                        } // script
                    } // steps
                } // stage
              //stage('deploy') {
              //    steps {
              //        script {
              //            openshift.withCluster() {
              //                openshift.withProject() {
              //                    def rm = openshift.selector("dc", templateName).rollout()
              //                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
              //                        return (it.object().status.phase == "Running")
              //                    }
              //                }
              //            }
              //        } // script
              //    } // steps
              //} // stage
              //stage('tag') {
              //    steps {
              //        script {
              //            openshift.withCluster() {
              //                openshift.withProject() {
              //                    // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
              //                    // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
              //                    // image to change and then deploy it to the staging environment
              //                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
              //                }
              //            }
              //        } // script
              //    } // steps
              //} // stage
            } // stages
        } // pipeline
